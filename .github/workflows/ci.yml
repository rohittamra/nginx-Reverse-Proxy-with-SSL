---
name: NGINX Reverse Proxy with SSL

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  # push_app:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 🐳 Login to Docker Hub
  #       run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" |  docker login -u rohit17061997 --password-stdin

  #     - name: 🐳 Build & Push Docker Image
  #       working-directory: application
  #       run: |
  #         IMAGE_TAG="rohit17061997/linux_tweet_app:latest"
  #         docker build -t "$IMAGE_TAG" .
  #         echo "Deploying version: ${{ needs.generate-tag.outputs.image_tag }}"
  #         docker push "$IMAGE_TAG"

  deploy_terraform_and_ansible:
    runs-on: ubuntu-latest

    env:
      TF_WORKING_DIR: terraform
      ANSIBLE_DIR: linux_tweet_deployment

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Azure CLI login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Check Azure login
        run: az account show

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      # - name: Terraform Import Existing Resources
      #   working-directory: ${{ env.TF_WORKING_DIR }}
      #   run: |
      #     terraform import azurerm_resource_group.rg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/linux-tweet-rg || true

      #     terraform import azurerm_virtual_network.vnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/linux-tweet-rg/providers/Microsoft.Network/virtualNetworks/linux-tweet-vnet || true

      #     terraform import azurerm_subnet.subnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/linux-tweet-rg/providers/Microsoft.Network/virtualNetworks/linux-tweet-vnet/subnets/linux-tweet-subnet || true

      #     terraform import azurerm_network_security_group.nsg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/linux-tweet-rg/providers/Microsoft.Network/networkSecurityGroups/linux-tweet-nsg || true

      #     terraform import azurerm_public_ip.linux_tweet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/linux-tweet-rg/providers/Microsoft.Network/publicIPAddresses/linux-tweet-ip || true

      #     terraform import azurerm_network_interface.nic /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/linux-tweet-rg/providers/Microsoft.Network/networkInterfaces/linux-tweet-nic || true

      #     terraform import azurerm_linux_virtual_machine.vm /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/linux-tweet-rg/providers/Microsoft.Compute/virtualMachines/linux-tweet-vm || true

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -detailed-exitcode -no-color -var="admin_password=${{ secrets.AZURE_SSH_PASS }}"
        continue-on-error: true

      - name: Terraform Apply
        if: steps.plan.outcome == 'success' && steps.plan.conclusion == 'success'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve -var="admin_password=${{ secrets.AZURE_SSH_PASS }}"

      - name: Get Terraform output
        id: terraform_output
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: echo "PUBLIC_IP=$(terraform output -raw public_ip)" >> $GITHUB_ENV

  ansible:
    runs-on: ubuntu-latest
    steps:
      - name: Get VM public IP
        run: |
          PUBLIC_IP=$(az network public-ip show \
            --resource-group linux-tweet-rg \
            --name linux-tweet-ip \
            --query ipAddress -o tsv)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Run Ansible on VM
        run: |
          sshpass -p "${{ secrets.AZURE_SSH_PASS }}" ssh -o StrictHostKeyChecking=no azureuser@${{ env.PUBLIC_IP }} << 'EOF' << 'EOF'
            cd /tmp/linux_tweet_deployment
            sudo apt update

            # Create inventory on the VM
            echo "[web]" > inventory
            echo "localhost ansible_connection=local ansible_python_interpreter=/usr/bin/python3" >> inventory

              # sudo openssl req -x509 -nodes -days 365 \ -newkey rsa:2048 \ -keyout /etc/ssl/linux_tweet_app/linux_tweet_app.key \ -out /etc/ssl/linux_tweet_app/linux_tweet_app.crt \ -subj "/CN=linux-tweet.example.com"
            ansible-playbook -i inventory /tmp/linux_tweet_deployment/playbook.yml --connection=local
          EOF

